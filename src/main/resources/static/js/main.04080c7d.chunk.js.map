{"version":3,"sources":["resources/logo.PNG","App.js","index.js"],"names":["useStyles","makeStyles","theme","backgroundDiv","height","width","top","left","position","backgroundColor","backgroundSize","selectionBox","display","flexDirection","justifyContent","alignItems","markerModeBox","map","routeButton","marginTop","logoImage","detailsBox","overflow","selectRoute","directions","colors","GoogleApiWrapper","apiKey","props","classes","React","useState","currentLocale","setLocale","currentMarkerMode","setCurrentMarkerMode","origin","setOrigin","destination","setDestination","originMarkerPos","setOriginMarkerPos","destinationMarkerPos","setDestinationMarkerPos","parsedLines","setParsedLines","details","setDetails","selected","setSelected","lamps","setLamps","useEffect","console","log","updateSelected","event","target","value","injestData","data","temp","temp1","temp2","i","routes","length","newOverviewPolyline","overviewPolyline","prevlatlng","lat","latitude","lng","longitude","allRouteLamps","allLights","light","coord","push","path","strokeColor","color","HTMLDirections","summary","renderRouteSelector","direction","index","MenuItem","FormControl","className","InputLabel","id","Select","onChange","src","logo","alt","Box","elevation","boxShadow","google","onClick","t","latLng","latlng","initialCenter","Button","fetch","then","response","json","variant","TextField","label","normalize","replace","filter","dangerouslySetInnerHTML","__html","Paper","renderRouteDetails","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04080c7d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.d4324bca.PNG\";","import React, { useEffect } from \"react\";\n\nimport { Button, Box, Card, CardMedia, FormControl, InputLabel, List, MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport logo from './resources/logo.PNG'\nimport { GoogleApiWrapper, Map, Marker, Polyline } from \"google-maps-react\";\n\nconst useStyles = makeStyles((theme) => ({\n  backgroundDiv: {\n    height: '100%',\n    width: '100%',\n    top: '0px',\n    left: '0px',\n    position: 'fixed',\n    backgroundColor: \"#FBFBFA\",\n    backgroundSize: 'cover',\n  },\n  selectionBox: {\n    top: '5%',\n    left: '5%',\n    height: '30%',\n    width: '20%',\n    position: 'absolute',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'white',\n  },\n  markerModeBox: {\n    top: '5%',\n    left: '80%',\n    height: '30%',\n    width: '15%',\n    position: 'absolute',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'white',\n  },\n  map: {\n    top: '40%',\n    left: '5%',\n    height: '55%',\n    width: '90%',\n    position: 'absolute',\n  },\n  routeButton: {\n    marginTop: '20px',\n    backgroundColor: \"lightblue\",\n  },\n  logoImage: {\n    display: 'block',\n    top: '10%',\n    left: '35%',\n    width: '50%',\n    position: 'absolute',\n  },\n  detailsBox: {\n    top: '5%',\n    left: '27.5%',\n    height: '30%',\n    width: '50%',\n    position: 'absolute',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    backgroundColor: 'white',\n    overflow: 'scroll',\n  },\n  selectRoute: {\n    top: '15%',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute'\n  },\n  directions: {\n    top: '35%',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute'\n  },\n\n}));\n\nconst colors = ['blue', 'red', 'green', 'orange', 'yellow']\n\nfunction App(props) {\n  const classes = useStyles();\n\n  const [currentLocale, setLocale] = React.useState(\"Baltimore\");\n  const [currentMarkerMode, setCurrentMarkerMode] = React.useState(\"Origin\")\n  const [origin, setOrigin] = React.useState(\"\");\n  const [destination, setDestination] = React.useState(\"\");\n  const [originMarkerPos, setOriginMarkerPos] = React.useState(null);\n  const [destinationMarkerPos, setDestinationMarkerPos] = React.useState(null);\n\n  const [parsedLines, setParsedLines] = React.useState(null);\n  const [details, setDetails] = React.useState(null);\n\n  const [selected, setSelected] = React.useState(0);\n  const [lamps, setLamps] = React.useState(null);\n\n  useEffect(() => {\n    console.log('lamps', lamps);\n    if(lamps !== null) {\n      console.log(lamps[selected]);\n    } else {\n      console.log('no lamp');\n    }\n  }, [selected, lamps]);\n\n  const updateLocale = (event) => {\n    setLocale(event.target.value);\n  };\n\n  const updateOrigin = (event) => {\n    setOrigin(event.target.value);\n  };\n\n  const updateDestination = (event) => {\n    setDestination(event.target.value);\n  };\n\n  const updateCurrentMarkerMode = (event) => {\n    console.log(event.target.value)\n    setCurrentMarkerMode(event.target.value)\n  }\n\n  const handleMarkerOnClick = (t, map, coord) => {\n    const { latLng } = coord;\n    const latlng = { lat: latLng.lat(), lng: latLng.lng() }\n    if (currentMarkerMode === \"Origin\") {\n      setOriginMarkerPos(latlng)\n    } else {\n      setDestinationMarkerPos(latlng)\n    }\n  }\n\n  const updateSelected = (event) => {\n    setSelected(event.target.value)\n  }\n\n  const injestData = data => {\n    let temp = [];\n    let temp1 = [];\n    let temp2 = [];\n    for (let i = 0; i < data.routes.length; i++) {\n      const newOverviewPolyline = data.routes[i].overviewPolyline.map(prevlatlng => (\n      {\n            lat: prevlatlng.latitude,\n            lng: prevlatlng.longitude\n      }));\n      const allRouteLamps = data.routes[i].allLights.map(light => (\n      {\n            lat: light.lat,\n            lng: light.lng\n      })).map(coord => <Marker key={coord} position={coord}/>);\n      temp.push(<Polyline path={newOverviewPolyline} strokeColor={colors[i]} key={colors[i]} />);\n      temp1.push({ color: colors[i], directions: data.routes[i].HTMLDirections, summary: data.routes[i].summary });\n      temp2.push(allRouteLamps);\n    }\n    setParsedLines(temp);\n    setDetails(temp1);\n    setLamps(temp2);\n    console.log(temp2);\n  };\n\n  const getDirections = () => {\n    fetch('/api/analyse_paths?start=' + origin.normalize().replace(/ /g, \"+\") + '&end=' + destination.normalize().replace(/ /g, \"+\"))\n        .then(response => response.json())\n        .then(injestData);\n  };\n\n  const getDirectionsFromMarkers =() => {\n    const origin = originMarkerPos.lat + ',' + originMarkerPos.lng;\n    const destination = destinationMarkerPos.lat + ',' + destinationMarkerPos.lng;\n    fetch('/api/analyse_paths?start=' + origin + '&end=' + destination)\n    .then(response => response.json())\n    .then(injestData);\n  };\n\n  const renderRouteSelector = () => {\n    if (parsedLines === null || details === null) {\n      return null\n    } else {\n      const colors = details.map((direction, index) => <MenuItem value={index} key={direction.color}>{direction.color}</MenuItem>)\n      return (\n        <FormControl className={classes.selectRoute}>\n          <InputLabel id=\"route\">Route</InputLabel>\n          <Select value={selected} onChange={updateSelected}>\n            {colors}\n          </Select>\n        </FormControl>\n      )\n    }\n  }\n\n  const renderRouteDetails = () => {\n    if (details === null || selected === null) {\n      return null\n    } else {\n      const directions = details.filter(direction => direction.color === colors[selected])[0].directions.map(direction => <li key={direction} dangerouslySetInnerHTML={{__html: direction}}/>)\n      return (\n        <Paper className={classes.detailsBox} elevation={1}>\n          {renderRouteSelector()}\n          <div dangerouslySetInnerHTML={{ __html: details.filter(direction => direction.color === colors[selected])[0].summary }} />\n          <ul className={classes.directions}>{directions}</ul>\n        </Paper>\n      )\n    }\n  }\n\n  return (\n    <div className={classes.backgroundDiv}>\n      {parsedLines === null ?\n        <div className={classes.logoImage}>\n          <img src={logo}  alt=\"logo\"/>\n        </div>\n        :\n        null\n      }\n\n      <Box className={classes.map} elevation={1} boxShadow={2}>\n        <Map\n          google={props.google}\n          onClick={handleMarkerOnClick}\n          initialCenter={{ lat: 39.289, lng: -76.612 }}\n        >\n          {parsedLines}\n          {originMarkerPos === null ? null :\n            <Marker\n              position={originMarkerPos}\n            />\n          }\n          {destinationMarkerPos === null ? null :\n            <Marker\n              position={destinationMarkerPos}\n            />\n          }\n          {lamps === null ? null :\n            lamps[selected]\n          }\n        </Map>\n      </Box>\n      <Box className={classes.markerModeBox} elevation={1} boxShadow={2}>\n        <FormControl>\n          <InputLabel id=\"Select\">Select</InputLabel>\n          <Select value={currentMarkerMode} onChange={updateCurrentMarkerMode}>\n            <MenuItem value={\"Origin\"}>Origin</MenuItem>\n            <MenuItem value={\"Destination\"}>Destination</MenuItem>\n          </Select>\n        </FormControl>\n        <Button className={classes.routeButton} onClick={getDirectionsFromMarkers} variant=\"contained\">Create Routes</Button>\n      </Box>\n      <Box className={classes.selectionBox} elevation={1} boxShadow={2}>\n        <FormControl>\n          <InputLabel id=\"city\">City</InputLabel>\n          <Select value={currentLocale} onChange={updateLocale}>\n            <MenuItem value={\"Baltimore\"}>Baltimore</MenuItem>\n            <MenuItem value={\"Boston\"}>Boston</MenuItem>\n            <MenuItem value={\"WashingtonDC\"}>Washington D.C.</MenuItem>\n          </Select>\n        </FormControl>\n        <form id=\"origin\" value={origin} onChange={updateOrigin}>\n          <TextField label=\"Origin\" />\n        </form>\n        <form id=\"destination\" value={destination} onChange={updateDestination}>\n          <TextField label=\"Destination\" />\n        </form>\n        <Button className={classes.routeButton} onClick={getDirections} variant=\"contained\">Create Routes</Button>\n      </Box>\n\n      {renderRouteDetails()}\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (\"AIzaSyBA1uVzpiZDnx0iG0qC_ZU1m1CpThmNWf4\"),\n})(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}